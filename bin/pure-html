#!/usr/bin/env node

const action = require('../src/server.js');
const fs = require('fs');
const glob = require('glob');
const os = require('os');
const defaultConfig = require('../config/default.json');
const path = require('path');
const pkg = require('../package.json');
const program = require('commander');

program
  .version(pkg.version)
  .description('Command line tool for creating standalone html files')
  .option('-w, --watch', `Start browsersync. Default ${defaultConfig.watch}`)
  .option(
    '-s, --src <path>',
    `Input source folder. Default ${defaultConfig.src}`
  )
  .option(
    '-d, --dest <path>',
    `Output output folder. Default ${defaultConfig.dest}`
  )
  .option(
    '-p, --port <port>',
    `Browswersync port listens. Default ${defaultConfig.port}`
  )
  .option(
    '-l, --html-lint',
    `Utilize HTML lint. Default ${defaultConfig.htmlLint}`
  );

program.on('--help', () => {
  return `
  Examples:

    $ pure-html -d -i src -o dist
    $ pure-html -f index.html
    $ pure-html -d -i input-folder -o output-folder -p 8000
  `;
});

program.parse(process.argv);

function getOptions() {
  if (!program.dest) {
    console.error('error: option -d, --dest is required');
    process.exit(1);
  }

  return Object.freeze({
    dest: program.dest,
    src: program.src || defaultConfig.src,
    port: program.port || defaultConfig.port,
    watch: program.watch || defaultConfig.watch,
    htmlLint: program.htmlLint || defaultConfig.htmlLint
  });
}

function formatPath(p) {
  if (p[0] === '/') {
    // Absolute path.
    return p;
  } else if (p[0] === '.' && p[1] === '/') {
    // Relative path.
    return p;
  } else {
    // Missing ./, this is needed for the glob pattern.
    return `./${p}`;
  }
}

function main() {
  const options = getOptions();
  const htmlFiles = glob.sync(`${formatPath(options.src)}/**/*.html`, {
    ignore: [`${options.dest}/**/*`]
  });

  if (program.watch) {
    action.dev(options, htmlFiles);
  } else {
    action.build(options, htmlFiles);
  }
}
main();
